diff -Nurp k3b-2.0.2/config-k3b.h.cmake k3b/config-k3b.h.cmake
--- k3b-2.0.2/config-k3b.h.cmake	2011-01-15 22:47:30.000000000 +0200
+++ k3b/config-k3b.h.cmake	2013-09-17 23:48:23.593464184 +0300
@@ -1,5 +1,4 @@
 /* config-k3b.h. Generated by cmake from config-k3b.h.cmake */
-#cmakedefine BUILD_K3BSETUP
 
 #cmakedefine K3B_DEBUG
 
@@ -9,16 +8,33 @@
 
 #cmakedefine ENABLE_TAGLIB
 
-#cmakedefine HAVE_SYS_VFS_H 1
+#cmakedefine HAVE_SYS_VFS_H
 
-#cmakedefine HAVE_SYS_STATVFS_H 1
+#cmakedefine HAVE_SYS_STATVFS_H
 
-#cmakedefine HAVE_STAT64 1
+#cmakedefine HAVE_STAT64
 
 #define K3B_VERSION_STRING "${K3B_VERSION_STRING}"
 
 #cmakedefine ENABLE_HAL_SUPPORT
 
-#cmakedefine HAVE_BYTESWAP_H 1
+#cmakedefine ENABLE_AUDIO_PLAYER
+
+#cmakedefine HAVE_BYTESWAP_H
+
+#cmakedefine WORDS_BIGENDIAN
+
+#cmakedefine HAVE_ICONV
+#cmakedefine ICONV_SECOND_ARGUMENT_IS_CONST
+
+#cmakedefine HAVE_FFMPEG_AVFORMAT_OPEN_INPUT
+#cmakedefine HAVE_FFMPEG_AV_DUMP_FORMAT
+#cmakedefine HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO
+#cmakedefine HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT
+#cmakedefine HAVE_FFMPEG_AVCODEC_OPEN2
+#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2
+#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
+#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO4
+#cmakedefine HAVE_FFMPEG_AVMEDIA_TYPE
+#cmakedefine HAVE_FFMPEG_CODEC_MP3
 
-#cmakedefine WORDS_BIGENDIAN 1
diff -Nurp k3b-2.0.2/CMakeLists.txt k3b/CMakeLists.txt
--- k3b-2.0.2/CMakeLists.txt	2011-01-15 22:52:01.000000000 +0200
+++ k3b/CMakeLists.txt	2013-09-17 23:48:23.591464184 +0300
@@ -100,6 +105,53 @@ if(K3B_BUILD_FFMPEG_DECODER_PLUGIN)
     "Needed for the K3b FFmpeg decoder plugin which can decode virtually all audio types."
     "http://ffmpeg.org/"
     FALSE "" "")
+  if(FFMPEG_FOUND)
+    include(CMakePushCheckState)
+    cmake_push_check_state()
+
+    if(CMAKE_COMPILER_IS_GNUCC)
+      # FindKDE4Internal.cmake screws things up
+      set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -std=c99)
+    endif(CMAKE_COMPILER_IS_GNUCC)
+
+    if(FFMPEG_INCLUDE_DIR_OLD_STYLE)
+      set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FFMPEG_INCLUDE_DIR_OLD_STYLE})
+      set(FFMPEG_HEADERS ffmpeg/avcodec.h ffmpeg/avformat.h)
+    else(FFMPEG_INCLUDE_DIR_OLD_STYLE)
+      set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})
+      set(FFMPEG_HEADERS libavcodec/avcodec.h libavformat/avformat.h)
+      set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DNEWFFMPEGAVCODECPATH)
+    endif(FFMPEG_INCLUDE_DIR_OLD_STYLE)
+    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${FFMPEG_LIBRARIES})
+
+    check_symbol_exists(avformat_open_input "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_OPEN_INPUT)
+    check_symbol_exists(av_dump_format "${FFMPEG_HEADERS}" HAVE_FFMPEG_AV_DUMP_FORMAT)
+    check_symbol_exists(avformat_find_stream_info "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO)
+    check_symbol_exists(avformat_close_input "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT)
+    check_symbol_exists(avcodec_open2 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_OPEN2)
+    check_symbol_exists(avcodec_decode_audio2 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2)
+    check_symbol_exists(avcodec_decode_audio3 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3)
+    check_symbol_exists(avcodec_decode_audio4 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_DECODE_AUDIO4)
+    include(CheckCSourceCompiles)
+    check_c_source_compiles("
+      #ifdef NEWFFMPEGAVCODECPATH
+      #include <libavcodec/avcodec.h>
+      #else
+      #include <ffmpeg/avcodec.h>
+      #endif
+      int main() { enum AVMediaType t = AVMEDIA_TYPE_UNKNOWN; return 0; }
+      " HAVE_FFMPEG_AVMEDIA_TYPE)
+    check_c_source_compiles("
+      #ifdef NEWFFMPEGAVCODECPATH
+      #include <libavcodec/avcodec.h>
+      #else
+      #include <ffmpeg/avcodec.h>
+      #endif
+      int main() { enum CodecID t = CODEC_ID_MP3; return 0; }
+      " HAVE_FFMPEG_CODEC_MP3)
+
+    cmake_pop_check_state()
+  endif(FFMPEG_FOUND)
 endif(K3B_BUILD_FFMPEG_DECODER_PLUGIN)
 
 if(K3B_BUILD_FLAC_DECODER_PLUGIN)
diff -Nurp k3b-2.0.2/plugins/decoder/ffmpeg/CMakeLists.txt k3b/plugins/decoder/ffmpeg/CMakeLists.txt
--- k3b-2.0.2/plugins/decoder/ffmpeg/CMakeLists.txt	2011-01-15 22:47:29.000000000 +0200
+++ k3b/plugins/decoder/ffmpeg/CMakeLists.txt	2013-09-17 23:48:23.664464181 +0300
@@ -9,7 +9,7 @@ if(FFMPEG_INCLUDE_DIR_OLD_STYLE)
 else(FFMPEG_INCLUDE_DIR_OLD_STYLE)
     message(STATUS "found new ffmpegcodecpath")
     add_definitions(-DNEWFFMPEGAVCODECPATH)
-    include_directories (${FFMPEG_INCLUDE_DIR})
+    include_directories (${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})
 endif(FFMPEG_INCLUDE_DIR_OLD_STYLE)
 
 set(k3bffmpegdecoder_PART_SRCS k3bffmpegdecoder.cpp k3bffmpegwrapper.cpp )
diff -Nurp k3b-2.0.2/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp k3b/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
--- k3b-2.0.2/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp	2011-01-15 22:47:29.000000000 +0200
+++ k3b/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp	2013-09-17 23:48:23.665464181 +0300
@@ -39,9 +39,33 @@ extern "C" {
 
 
 #if LIBAVFORMAT_BUILD < 4629
-#define FFMPEG_BUILD_PRE_4629
+#define FFMPEG_CODEC(s) (&s->codec)
+#else
+#define FFMPEG_CODEC(s) (s->codec)
 #endif
 
+#ifndef HAVE_FFMPEG_AVFORMAT_OPEN_INPUT
+//      this works because the parameters/options are not used
+#  define avformat_open_input(c,s,f,o) av_open_input_file(c,s,f,0,o)
+#endif
+#ifndef HAVE_FFMPEG_AV_DUMP_FORMAT
+#  define av_dump_format(c,x,f,y) dump_format(c,x,f,y)
+#endif
+#ifndef HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO
+#  define avformat_find_stream_info(c,o) av_find_stream_info(c)
+#endif
+#ifndef HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT
+#  define avformat_close_input(c) av_close_input_file(*c)
+#endif
+#ifndef HAVE_FFMPEG_AVCODEC_OPEN2
+#  define avcodec_open2(a,c,o) avcodec_open(a,c)
+#endif
+#ifndef HAVE_FFMPEG_AVMEDIA_TYPE
+#  define AVMEDIA_TYPE_AUDIO CODEC_TYPE_AUDIO
+#endif
+#ifndef HAVE_FFMPEG_CODEC_MP3
+#  define CODEC_ID_MP3 CODEC_ID_MP3LAME
+#endif
 
 K3bFFMpegWrapper* K3bFFMpegWrapper::s_instance = 0;
 
@@ -88,14 +112,14 @@ bool K3bFFMpegFile::open()
     close();
 
     // open the file
-    int err = ::av_open_input_file( &d->formatContext, m_filename.toLocal8Bit(), 0, 0, 0 );
+    int err = ::avformat_open_input( &d->formatContext, m_filename.toLocal8Bit(), 0, 0 );
     if( err < 0 ) {
         kDebug() << "(K3bFFMpegFile) unable to open " << m_filename << " with error " << err;
         return false;
     }
 
     // analyze the streams
-    ::av_find_stream_info( d->formatContext );
+    ::avformat_find_stream_info( d->formatContext, 0 );
 
     // we only handle files containing one audio stream
     if( d->formatContext->nb_streams != 1 ) {
@@ -104,12 +128,9 @@ bool K3bFFMpegFile::open()
     }
 
     // urgh... ugly
-#ifdef FFMPEG_BUILD_PRE_4629
-    ::AVCodecContext* codecContext =  &d->formatContext->streams[0]->codec;
-#else
-    ::AVCodecContext* codecContext =  d->formatContext->streams[0]->codec;
-#endif
-    if( codecContext->codec_type != CODEC_TYPE_AUDIO ) {
+    ::AVCodecContext* codecContext =  FFMPEG_CODEC(d->formatContext->streams[0]);
+    if( codecContext->codec_type != AVMEDIA_TYPE_AUDIO)
+    {
         kDebug() << "(K3bFFMpegFile) not a simple audio stream: " << m_filename;
         return false;
     }
@@ -123,7 +144,7 @@ bool K3bFFMpegFile::open()
 
     // open the codec on our context
     kDebug() << "(K3bFFMpegFile) found codec for " << m_filename;
-    if( ::avcodec_open( codecContext, d->codec ) < 0 ) {
+    if( ::avcodec_open2( codecContext, d->codec, 0 ) < 0 ) {
         kDebug() << "(K3bFFMpegDecoderFactory) could not open codec.";
         return false;
     }
@@ -137,7 +158,7 @@ bool K3bFFMpegFile::open()
     }
 
     // dump some debugging info
-    ::dump_format( d->formatContext, 0, m_filename.toLocal8Bit(), 0 );
+    ::av_dump_format( d->formatContext, 0, m_filename.toLocal8Bit(), 0 );
 
     return true;
 }
@@ -150,16 +171,12 @@ void K3bFFMpegFile::close()
     d->packetData = 0;
 
     if( d->codec ) {
-#ifdef FFMPEG_BUILD_PRE_4629
-        ::avcodec_close( &d->formatContext->streams[0]->codec );
-#else
-        ::avcodec_close( d->formatContext->streams[0]->codec );
-#endif
+        ::avcodec_close( FFMPEG_CODEC(d->formatContext->streams[0]) );
         d->codec = 0;
     }
 
     if( d->formatContext ) {
-        ::av_close_input_file( d->formatContext );
+        ::avformat_close_input( &d->formatContext );
         d->formatContext = 0;
     }
 }
@@ -173,31 +190,19 @@ K3b::Msf K3bFFMpegFile::length() const
 
 int K3bFFMpegFile::sampleRate() const
 {
-#ifdef FFMPEG_BUILD_PRE_4629
-    return d->formatContext->streams[0]->codec.sample_rate;
-#else
-    return d->formatContext->streams[0]->codec->sample_rate;
-#endif
+    return FFMPEG_CODEC(d->formatContext->streams[0])->sample_rate;
 }
 
 
 int K3bFFMpegFile::channels() const
 {
-#ifdef FFMPEG_BUILD_PRE_4629
-    return d->formatContext->streams[0]->codec.channels;
-#else
-    return d->formatContext->streams[0]->codec->channels;
-#endif
+    return FFMPEG_CODEC(d->formatContext->streams[0])->channels;
 }
 
 
 int K3bFFMpegFile::type() const
 {
-#ifdef FFMPEG_BUILD_PRE_4629
-    return d->formatContext->streams[0]->codec.codec_id;
-#else
-    return d->formatContext->streams[0]->codec->codec_id;
-#endif
+    return FFMPEG_CODEC(d->formatContext->streams[0])->codec_id;
 }
 
 
@@ -208,11 +213,7 @@ QString K3bFFMpegFile::typeComment() con
         return i18n("Windows Media v1");
     case CODEC_ID_WMAV2:
         return i18n("Windows Media v2");
-#if LIBAVCODEC_VERSION_MAJOR < 52
-    case CODEC_ID_MP3LAME:
-#else
     case CODEC_ID_MP3:
-#endif
         return i18n("MPEG 1 Layer III");
     case CODEC_ID_AAC:
         return i18n("Advanced Audio Coding (AAC)");
@@ -225,8 +226,11 @@ QString K3bFFMpegFile::typeComment() con
 QString K3bFFMpegFile::title() const
 {
     // FIXME: is this UTF8 or something??
-    if( d->formatContext->title[0] != '\0' )
-        return QString::fromLocal8Bit( d->formatContext->title );
+    AVDictionaryEntry *ade = av_dict_get( d->formatContext->metadata, "TITLE", NULL, 0 );
+    if( ade == NULL )
+        return QString();
+    if( ade->value != '\0' )
+        return QString::fromLocal8Bit( ade->value );
     else
         return QString();
 }
@@ -235,8 +239,11 @@ QString K3bFFMpegFile::title() const
 QString K3bFFMpegFile::author() const
 {
     // FIXME: is this UTF8 or something??
-    if( d->formatContext->author[0] != '\0' )
-        return QString::fromLocal8Bit( d->formatContext->author );
+    AVDictionaryEntry *ade = av_dict_get( d->formatContext->metadata, "ARTIST", NULL, 0 );
+    if( ade == NULL )
+        return QString();
+    if( ade->value != '\0' )
+        return QString::fromLocal8Bit( ade->value );
     else
         return QString();
 }
@@ -245,8 +252,11 @@ QString K3bFFMpegFile::author() const
 QString K3bFFMpegFile::comment() const
 {
     // FIXME: is this UTF8 or something??
-    if( d->formatContext->comment[0] != '\0' )
-        return QString::fromLocal8Bit( d->formatContext->comment );
+    AVDictionaryEntry *ade = av_dict_get( d->formatContext->metadata, "COMMENT", NULL, 0 );
+    if( ade == NULL )
+        return QString();
+    if( ade->value != '\0' )
+        return QString::fromLocal8Bit( ade->value );
     else
         return QString();
 }
@@ -306,19 +316,24 @@ int K3bFFMpegFile::fillOutputBuffer()
         d->outputBufferPos = d->alignedOutputBuffer;
         d->outputBufferSize = AVCODEC_MAX_AUDIO_FRAME_SIZE;
 
-#if LIBAVCODEC_VERSION_MAJOR < 52
-        int len = ::avcodec_decode_audio(
+#ifdef HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
+        int len = ::avcodec_decode_audio3(
 #else
+#  ifdef HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2
         int len = ::avcodec_decode_audio2(
+#  else
+        int len = ::avcodec_decode_audio(
+#  endif
 #endif
-#ifdef FFMPEG_BUILD_PRE_4629
-            &d->formatContext->streams[0]->codec,
-#else
-            d->formatContext->streams[0]->codec,
-#endif
+
+            FFMPEG_CODEC(d->formatContext->streams[0]),
             (short*)d->alignedOutputBuffer,
             &d->outputBufferSize,
+#ifdef HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
+            &d->packet );
+#else
             d->packetData, d->packetSize );
+#endif
 
         if( d->packetSize <= 0 || len < 0 )
             ::av_free_packet( &d->packet ); 
